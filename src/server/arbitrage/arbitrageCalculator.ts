export interface ArbitrageOpportunity {
  route: string;
  internationalPrice: number;
  algerianPriceDZD: number;
  algerianPriceEUR: {
    official: number; // Taux officiel (1‚Ç¨ = 150 DZD)
    parallel: number; // Taux parall√®le/march√© noir (1‚Ç¨ = 260 DZD)
  };
  savings: {
    official: number;
    parallel: number;
  };
  savingsPercentage: {
    official: number;
    parallel: number;
  };
  riskLevel: "LOW" | "MEDIUM" | "HIGH";
  recommendations: string[];
  timestamp: Date;
}

export interface ExchangeRates {
  official: number; // BCE/Banque d'Alg√©rie (1‚Ç¨ = 150 DZD)
  parallel: number; // March√© parall√®le/march√© noir (1‚Ç¨ = 260 DZD)
  lastUpdated: Date;
}

export class ArbitrageCalculator {
  private exchangeRates: ExchangeRates = {
    official: 150, // 1 EUR = 150 DZD (BCE/Banque d'Alg√©rie)
    parallel: 260, // 1 EUR = 260 DZD (March√© parall√®le/march√© noir)
    lastUpdated: new Date(),
  };

  /**
   * Calcule les opportunit√©s d'arbitrage pour une route donn√©e
   */
  calculateArbitrage(
    route: string,
    internationalPriceEUR: number,
    algerianPriceDZD: number
  ): ArbitrageOpportunity {
    // Calcul des prix en EUR selon les 2 taux
    const algerianPriceEUR = {
      official: this.roundTo2Decimals(
        algerianPriceDZD / this.exchangeRates.official
      ),
      parallel: this.roundTo2Decimals(
        algerianPriceDZD / this.exchangeRates.parallel
      ),
    };

    // Calcul des √©conomies
    const savings = {
      official: this.roundTo2Decimals(
        internationalPriceEUR - algerianPriceEUR.official
      ),
      parallel: this.roundTo2Decimals(
        internationalPriceEUR - algerianPriceEUR.parallel
      ),
    };

    // Calcul des pourcentages d'√©conomies
    const savingsPercentage = {
      official: this.roundTo2Decimals(
        (savings.official / internationalPriceEUR) * 100
      ),
      parallel: this.roundTo2Decimals(
        (savings.parallel / internationalPriceEUR) * 100
      ),
    };

    // √âvaluation du niveau de risque
    const riskLevel = this.assessRiskLevel(savings, algerianPriceEUR);

    // G√©n√©ration des recommandations
    const recommendations = this.generateRecommendations(
      savings,
      savingsPercentage,
      riskLevel,
      route
    );

    return {
      route,
      internationalPrice: internationalPriceEUR,
      algerianPriceDZD,
      algerianPriceEUR,
      savings,
      savingsPercentage,
      riskLevel,
      recommendations,
      timestamp: new Date(),
    };
  }

  /**
   * Calcule l'arbitrage pour plusieurs routes
   */
  calculateMultipleArbitrages(
    routes: Array<{
      route: string;
      internationalPriceEUR: number;
      algerianPriceDZD: number;
    }>
  ): ArbitrageOpportunity[] {
    return routes.map((route) =>
      this.calculateArbitrage(
        route.route,
        route.internationalPriceEUR,
        route.algerianPriceDZD
      )
    );
  }

  /**
   * Trouve les meilleures opportunit√©s d'arbitrage
   */
  findBestOpportunities(
    opportunities: ArbitrageOpportunity[],
    minSavingsPercentage: number = 10
  ): ArbitrageOpportunity[] {
    return opportunities
      .filter((opp) => opp.savingsPercentage.parallel >= minSavingsPercentage)
      .sort(
        (a, b) => b.savingsPercentage.parallel - a.savingsPercentage.parallel
      );
  }

  /**
   * Calcule l'arbitrage pour votre exemple Paris-Dubai
   */
  calculateParisDubaiArbitrage(): ArbitrageOpportunity {
    return this.calculateArbitrage(
      "CDG-DXB",
      354, // Prix Google Flights
      60455 // Prix Air Alg√©rie en DZD
    );
  }

  /**
   * Met √† jour les taux de change
   */
  updateExchangeRates(rates: Partial<ExchangeRates>): void {
    this.exchangeRates = {
      ...this.exchangeRates,
      ...rates,
      lastUpdated: new Date(),
    };
  }

  /**
   * Obtient les taux de change actuels
   */
  getExchangeRates(): ExchangeRates {
    return { ...this.exchangeRates };
  }

  /**
   * √âvalue le niveau de risque d'une opportunit√©
   */
  private assessRiskLevel(
    savings: ArbitrageOpportunity["savings"],
    algerianPriceEUR: ArbitrageOpportunity["algerianPriceEUR"]
  ): ArbitrageOpportunity["riskLevel"] {
    // Risque bas si √©conomies > 20% au taux parall√®le
    if (savings.parallel > 0 && savings.parallel > 50) {
      return "LOW";
    }

    // Risque moyen si √©conomies 10-20%
    if (savings.parallel > 0 && savings.parallel > 20) {
      return "MEDIUM";
    }

    // Risque √©lev√© sinon
    return "HIGH";
  }

  /**
   * G√©n√®re des recommandations personnalis√©es
   */
  private generateRecommendations(
    savings: ArbitrageOpportunity["savings"],
    savingsPercentage: ArbitrageOpportunity["savingsPercentage"],
    riskLevel: ArbitrageOpportunity["riskLevel"],
    route: string
  ): string[] {
    const recommendations: string[] = [];

    // Recommandations bas√©es sur les √©conomies
    if (savings.parallel > 100) {
      recommendations.push(
        `üí∞ Opportunit√© exceptionnelle : ${savings.parallel}‚Ç¨ d'√©conomies (${savingsPercentage.parallel}%)`
      );
    } else if (savings.parallel > 50) {
      recommendations.push(
        `‚úÖ Bonne opportunit√© : ${savings.parallel}‚Ç¨ d'√©conomies (${savingsPercentage.parallel}%)`
      );
    } else if (savings.parallel > 0) {
      recommendations.push(
        `‚ö†Ô∏è Opportunit√© limit√©e : ${savings.parallel}‚Ç¨ d'√©conomies (${savingsPercentage.parallel}%)`
      );
    } else {
      recommendations.push(`‚ùå Pas d'arbitrage profitable sur cette route`);
    }

    // Recommandations bas√©es sur le niveau de risque
    switch (riskLevel) {
      case "LOW":
        recommendations.push(
          "üü¢ Risque faible - Recommand√© pour les √©conomies importantes"
        );
        break;
      case "MEDIUM":
        recommendations.push(
          "üü° Risque mod√©r√© - V√©rifiez les conditions de visa et de correspondance"
        );
        break;
      case "HIGH":
        recommendations.push(
          "üî¥ Risque √©lev√© - Consid√©rez les alternatives directes"
        );
        break;
    }

    // Recommandations sp√©cifiques par route
    if (route.includes("DXB") || route.includes("Dubai")) {
      recommendations.push(
        "üåç V√©rifiez les conditions de visa pour les √âmirats Arabes Unis"
      );
      recommendations.push(
        "‚úàÔ∏è Pr√©voyez un temps de correspondance suffisant √† Alger"
      );
    }

    if (route.includes("CDG") || route.includes("Paris")) {
      recommendations.push(
        "üá´üá∑ D√©part depuis Paris - V√©rifiez les horaires de correspondance"
      );
      recommendations.push(
        "üïê Consid√©rez les vols de nuit pour optimiser le temps de voyage"
      );
    }

    return recommendations;
  }

  /**
   * Arrondit un nombre √† 2 d√©cimales
   */
  private roundTo2Decimals(value: number): number {
    return Math.round(value * 100) / 100;
  }

  /**
   * Formate un prix en DZD avec s√©parateurs de milliers
   */
  formatPriceDZD(price: number): string {
    return new Intl.NumberFormat("fr-DZ", {
      style: "currency",
      currency: "DZD",
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    }).format(price);
  }

  /**
   * Formate un prix en EUR
   */
  formatPriceEUR(price: number): string {
    return new Intl.NumberFormat("fr-FR", {
      style: "currency",
      currency: "EUR",
      minimumFractionDigits: 2,
      maximumFractionDigits: 2,
    }).format(price);
  }
}
